rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read for bird species and articles
    match /birdSpecies/{speciesId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Example: Admin only
    }
    match /articles/{articleId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Example: Admin only
    }

    // Sightings: users can create, only owners can update/delete, public read
    match /sightings/{sightingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // User Alerts: only owner can CRUD
    match /userAlerts/{alertId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Forum Threads
    match /forumThreads/{threadId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid; // e.g. for editing own thread title
      // Replies are a subcollection, handle separately or inherit
    }

    // Forum Replies (subcollection of forumThreads)
    match /forumThreads/{threadId}/replies/{replyId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // User-specific data (example for a 'users' collection to store roles)
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId; // Or admin
    }
    
  	match /b/{bucket}/o {
    	match /{allPaths=**} {
      	allow read: if true;
      	allow write: if request.auth != null;
    	}
  	}

  }
}